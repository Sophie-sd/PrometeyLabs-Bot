#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–µ–±-—Ö—É–∫—ñ–≤ PrometeyLabs Telegram Bot
"""
import requests
import json
import sys

def test_health_check(base_url):
    """–¢–µ—Å—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É"""
    try:
        response = requests.get(f"{base_url}/")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check: {data}")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False

def test_bot_info(base_url):
    """–¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞"""
    try:
        response = requests.get(f"{base_url}/bot_info")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Bot info: {data}")
            return True
        else:
            print(f"‚ùå Bot info failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Bot info error: {e}")
        return False

def test_set_webhook(base_url):
    """–¢–µ—Å—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±-—Ö—É–∫–∞"""
    try:
        webhook_url = f"{base_url}/webhook"
        response = requests.get(f"{base_url}/set_webhook", params={"url": base_url})
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Webhook set: {data}")
            return True
        else:
            print(f"‚ùå Webhook set failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Webhook set error: {e}")
        return False

def test_delete_webhook(base_url):
    """–¢–µ—Å—Ç –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–µ–±-—Ö—É–∫–∞"""
    try:
        response = requests.get(f"{base_url}/delete_webhook")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Webhook deleted: {data}")
            return True
        else:
            print(f"‚ùå Webhook delete failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Webhook delete error: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
    if len(sys.argv) != 2:
        print("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: python test_webhook.py <base_url>")
        print("–ü—Ä–∏–∫–ª–∞–¥: python test_webhook.py https://your-app.onrender.com")
        sys.exit(1)
    
    base_url = sys.argv[1].rstrip('/')
    print(f"üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É: {base_url}")
    print("=" * 50)
    
    # –¢–µ—Å—Ç—É—î–º–æ –≤—Å—ñ –µ–Ω–¥–ø–æ—ñ–Ω—Ç–∏
    tests = [
        ("Health Check", lambda: test_health_check(base_url)),
        ("Bot Info", lambda: test_bot_info(base_url)),
        ("Set Webhook", lambda: test_set_webhook(base_url)),
        ("Delete Webhook", lambda: test_delete_webhook(base_url)),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\nüîç –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {test_name}")
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: {e}")
            results.append((test_name, False))
    
    # –ü—ñ–¥—Å—É–º–æ–∫
    print("\n" + "=" * 50)
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} {test_name}")
    
    print(f"\nüéØ –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("‚ö†Ô∏è –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        sys.exit(1)

if __name__ == "__main__":
    main()
