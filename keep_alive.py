#!/usr/bin/env python3
"""
Keep-alive —Å–∫—Ä–∏–ø—Ç –¥–ª—è PrometeyLabs Telegram Bot –Ω–∞ Render
–ü—ñ–¥—Ç—Ä–∏–º—É—î —Å–µ—Ä–≤—ñ—Å –∞–∫—Ç–∏–≤–Ω–∏–º –Ω–∞ free tier
"""
import requests
import time
import schedule
import logging
from datetime import datetime

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('keep_alive.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# URL –≤–∞—à–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
SERVICE_URL = "https://prometeylabs-telegram-bot-4mu2.onrender.com"

def ping_service():
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î ping –¥–æ —Å–µ—Ä–≤—ñ—Å—É"""
    try:
        logger.info("üîÑ –í—ñ–¥–ø—Ä–∞–≤–ª—è—é ping –¥–æ —Å–µ—Ä–≤—ñ—Å—É...")
        
        # –ü—Ä–æ–±—É—î–º–æ health check
        health_response = requests.get(f"{SERVICE_URL}/", timeout=30)
        if health_response.status_code == 200:
            health_data = health_response.json()
            logger.info(f"‚úÖ Health check: {health_data.get('status')} | Bot: {health_data.get('bot_status')}")
        else:
            logger.warning(f"‚ö†Ô∏è  Health check failed: HTTP {health_response.status_code}")
        
        # –ü—Ä–æ–±—É—î–º–æ ping endpoint
        ping_response = requests.get(f"{SERVICE_URL}/ping", timeout=30)
        if ping_response.status_code == 200:
            ping_data = ping_response.json()
            logger.info(f"‚úÖ Ping: {ping_data.get('pong')} | {ping_data.get('timestamp')}")
        else:
            logger.warning(f"‚ö†Ô∏è  Ping failed: HTTP {ping_response.status_code}")
            
        return True
        
    except requests.exceptions.Timeout:
        logger.warning("‚è∞ –¢–∞–π–º–∞—É—Ç - —Å–µ—Ä–≤—ñ—Å –º–æ–∂–µ –±—É—Ç–∏ –≤ —Ä–µ–∂–∏–º—ñ —Å–Ω—É")
        return False
    except requests.exceptions.ConnectionError:
        logger.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è - —Å–µ—Ä–≤—ñ—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        return False
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ ping: {e}")
        return False

def test_webhook():
    """–¢–µ—Å—Ç—É—î webhook endpoint"""
    try:
        logger.info("üîó –¢–µ—Å—Ç—É—é webhook endpoint...")
        
        webhook_response = requests.get(f"{SERVICE_URL}/bot_info", timeout=30)
        if webhook_response.status_code == 200:
            bot_data = webhook_response.json()
            if bot_data.get('status') == 'success':
                logger.info("‚úÖ Webhook endpoint –ø—Ä–∞—Ü—é—î")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è  Webhook endpoint –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏: {bot_data.get('error')}")
                return False
        else:
            logger.warning(f"‚ö†Ô∏è  Webhook endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: HTTP {webhook_response.status_code}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É webhook: {e}")
        return False

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    logger.info("üöÄ Keep-alive —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ")
    logger.info(f"üéØ –°–µ—Ä–≤—ñ—Å: {SERVICE_URL}")
    
    # –ü–µ—Ä—à–∏–π ping
    ping_service()
    
    # –ü–ª–∞–Ω—É—î–º–æ ping –∫–æ–∂–Ω—ñ 14 —Ö–≤–∏–ª–∏–Ω (Render free tier –∑–∞—Å–∏–Ω–∞—î —á–µ—Ä–µ–∑ 15 —Ö–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ)
    schedule.every(14).minutes.do(ping_service)
    
    # –ü–ª–∞–Ω—É—î–º–æ —Ç–µ—Å—Ç webhook –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω
    schedule.every(30).minutes.do(test_webhook)
    
    logger.info("üìÖ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è:")
    logger.info("   - Ping –∫–æ–∂–Ω—ñ 14 —Ö–≤–∏–ª–∏–Ω")
    logger.info("   - Webhook —Ç–µ—Å—Ç –∫–æ–∂–Ω—ñ 30 —Ö–≤–∏–ª–∏–Ω")
    logger.info("   - –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏")
    
    try:
        while True:
            schedule.run_pending()
            time.sleep(60)  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
            
    except KeyboardInterrupt:
        logger.info("üõë Keep-alive —Å–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    main()
