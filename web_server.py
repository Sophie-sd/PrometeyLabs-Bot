"""
–í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è PrometeyLabs Telegram Bot –Ω–∞ Render
–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ python-telegram-bot v21 + Telegram Business
"""
from flask import Flask, request, jsonify
import os
import logging
import asyncio
from telegram.ext import Application
from telegram import Update, BotCommand
from config import BOT_TOKEN, BOT_NAME, BOT_DESCRIPTION
from handlers import setup_command_handlers, setup_message_handlers, setup_callback_handlers
from utils.logger import setup_logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = setup_logging()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Flask –¥–æ–¥–∞—Ç–∫—É
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –±–æ—Ç–∞
bot_application = None

async def error_handler(update, context):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    try:
        if update and update.effective_user:
            user_id = update.effective_user.id
            username = update.effective_user.username or "Unknown"
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} (@{username}): {context.error}")
        else:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {context.error}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ error_handler: {e}")

def run_async(coro):
    """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ"""
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    
    return loop.run_until_complete(coro)

def create_bot():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞"""
    global bot_application
    
    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        try:
            from database import init_database
            if not init_database():
                logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–∞–∑—É –¥–∞–Ω–∏—Ö")
                return False
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≥–æ—Ç–æ–≤–∞")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ë–î: {e}")
            return False
        
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Business
        bot_application = Application.builder().token(BOT_TOKEN).build()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
        setup_command_handlers(bot_application)
        setup_message_handlers(bot_application)
        setup_callback_handlers(bot_application)
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
        bot_application.add_error_handler(error_handler)
        
        # –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–£–Ñ–ú–û Application (–æ–±–æ–≤'—è–∑–∫–æ–≤–æ –¥–ª—è v21!)
        run_async(bot_application.initialize())
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞
        run_async(setup_bot_commands())
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é
        run_async(setup_chat_menu_button())
        
        logger.info(f"‚úÖ –ë–æ—Ç {BOT_NAME} —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        return True
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –±–æ—Ç–∞: {e}", exc_info=True)
        return False

async def setup_bot_commands():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        commands = [
            BotCommand("start", "–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º"),
            BotCommand("menu", "–ü–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"),
            BotCommand("help", "–î–æ–ø–æ–º–æ–≥–∞ –ø–æ –±–æ—Ç—É"),
            BotCommand("support", "–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é")
        ]
        
        await bot_application.bot.set_my_commands(commands)
        logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥: {e}")

async def setup_chat_menu_button():
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —á–∞—Ç—É"""
    try:
        from telegram import MenuButtonCommands
        
        await bot_application.bot.set_chat_menu_button(
            menu_button=MenuButtonCommands()
        )
        logger.info("‚úÖ –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é —á–∞—Ç—É –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é: {e}")

def log_update_details(update):
    """–õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Business"""
    try:
        update_id = update.update_id
        has_business_connection = bool(update.business_connection)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –±–µ—Ä–µ–º–æ business_connection_id –∑ effective_message
        if update.effective_message:
            from_id = update.effective_message.from_user.id if update.effective_message.from_user else "N/A"
            chat_id = update.effective_message.chat.id if update.effective_message.chat else "N/A"
            business_connection_id = getattr(update.effective_message, 'business_connection_id', None)
            
            logger.info(f"üì± Update {update_id}: bcid={business_connection_id}, from={from_id}, chat={chat_id}, "
                       f"business_connection={has_business_connection}")
        elif update.callback_query:
            # –î–ª—è callback –∑–∞–ø–∏—Ç—ñ–≤
            from_id = update.callback_query.from_user.id if update.callback_query.from_user else "N/A"
            chat_id = update.callback_query.message.chat.id if update.callback_query.message else "N/A"
            business_connection_id = getattr(update.callback_query.message, 'business_connection_id', None)
            
            logger.info(f"üì± Update {update_id}: bcid={business_connection_id}, from={from_id}, chat={chat_id}, "
                       f"callback_query")
        else:
            logger.info(f"üì± Update {update_id}: business_connection={has_business_connection}")
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π update: {e}")

def stop_bot():
    """–ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞"""
    global bot_application
    
    if bot_application:
        try:
            run_async(bot_application.stop())
            run_async(bot_application.shutdown())
            logger.info("‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –±–æ—Ç–∞: {e}")
        finally:
            bot_application = None

def ensure_bot_initialized():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ"""
    global bot_application
    
    if bot_application is None:
        logger.warning("–ë–æ—Ç –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π, —Å–ø—Ä–æ–±—É—é —Å—Ç–≤–æ—Ä–∏—Ç–∏...")
        
        # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–æ—Ç–∞ –∫—ñ–ª—å–∫–∞ —Ä–∞–∑—ñ–≤
        max_retries = 3
        for attempt in range(max_retries):
            try:
                logger.info(f"–°–ø—Ä–æ–±–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞ {attempt + 1}/{max_retries}")
                if create_bot():
                    logger.info("–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
                    return True
                else:
                    logger.warning(f"–°–ø—Ä–æ–±–∞ {attempt + 1} –Ω–µ–≤–¥–∞–ª–∞")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ {attempt + 1}: {e}")
            
            if attempt < max_retries - 1:
                import time
                time.sleep(2)  # –ß–µ–∫–∞—î–º–æ 2 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é
        
        logger.error("–í—Å—ñ —Å–ø—Ä–æ–±–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–æ—Ç–∞ –Ω–µ–≤–¥–∞–ª—ñ")
        return False
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±–æ—Ç –¥—ñ–π—Å–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π
    try:
        if hasattr(bot_application, '_initialized') and bot_application._initialized:
            return True
        else:
            logger.warning("–ë–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∞–ª–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. –ü–µ—Ä–µ—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—é...")
            run_async(bot_application.initialize())
            return True
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: {e}")
        return False

@app.route('/')
def health_check():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É –¥–ª—è Render"""
    try:
        # –ü—Ä–æ—Å—Ç–∏–π health check –±–µ–∑ —Å–∫–ª–∞–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
        bot_status = "initialized" if bot_application else "not_initialized"
        
        health_info = {
            "status": "healthy",
            "service": "PrometeyLabs Telegram Bot",
            "version": "1.0.0",
            "bot_status": bot_status,
            "timestamp": __import__('datetime').datetime.now().isoformat(),
            "endpoints": {
                "health": "/",
                "ping": "/ping",
                "webhook": "/webhook",
                "bot_info": "/bot_info",
                "set_webhook": "/set_webhook"
            }
        }
        
        # –î–æ–¥–∞—î–º–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞ (—Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω –≥–æ—Ç–æ–≤–∏–π)
        if bot_application and bot_application.bot and bot_status == "initialized":
            try:
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ get_me –ê–°–ò–ù–•–†–û–ù–ù–û
                bot_info = run_async(bot_application.bot.get_me())
                health_info["bot_details"] = {
                    "id": bot_info.id,
                    "username": bot_info.username,
                    "first_name": bot_info.first_name
                }
            except Exception as e:
                health_info["bot_details"] = {"error": str(e)}
        
        return jsonify(health_info)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ health check: {e}")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π response –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        return jsonify({
            "status": "error",
            "service": "PrometeyLabs Telegram Bot",
            "error": str(e),
            "timestamp": __import__('datetime').datetime.now().isoformat()
        }), 500

@app.route('/ping')
def ping():
    """Keep-alive endpoint –¥–ª—è Render free tier"""
    try:
        # –ü—Ä–æ—Å—Ç–∏–π ping –±–µ–∑ —Å–∫–ª–∞–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
        bot_status = "initialized" if bot_application else "not_initialized"
        
        ping_info = {
            "pong": True,
            "timestamp": __import__('datetime').datetime.now().isoformat(),
            "bot_status": bot_status,
            "message": "Keep-alive ping successful"
        }
        
        return jsonify(ping_info)
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ ping: {e}")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–æ—Å—Ç–∏–π response –Ω–∞–≤—ñ—Ç—å –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
        return jsonify({
            "pong": False,
            "error": str(e),
            "timestamp": __import__('datetime').datetime.now().isoformat()
        }), 500

@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–æ–±–∫–∞ –≤–µ–±-—Ö—É–∫—ñ–≤ –≤—ñ–¥ Telegram"""
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –±–æ—Ç–∞ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if not ensure_bot_initialized():
        logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –±–æ—Ç–∞ –¥–ª—è webhook")
        return jsonify({"error": "Bot initialization failed"}), 500
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≤—ñ–¥ Telegram
        update_data = request.get_json()
        
        if not update_data:
            logger.warning("Webhook –æ—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ")
            return jsonify({"error": "Empty data"}), 400
        
        logger.info(f"Webhook –æ—Ç—Ä–∏–º–∞–Ω–æ: {update_data.get('update_id', 'unknown')}")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Update –æ–±'—î–∫—Ç —Ç–∞ –æ–±—Ä–æ–±–ª—è—î–º–æ –π–æ–≥–æ
        update = Update.de_json(update_data, bot_application.bot)
        
        # –õ–æ–≥—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Business
        log_update_details(update)
        
        # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ê–°–ò–ù–•–†–û–ù–ù–û
        try:
            run_async(bot_application.process_update(update))
            logger.info(f"Webhook –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: {update.update_id}")
            return jsonify({"status": "ok", "update_id": update.update_id})
        except Exception as process_error:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {process_error}")
            return jsonify({"error": "Update processing failed"}), 500
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ webhook: {e}", exc_info=True)
        return jsonify({"error": str(e)}), 500

@app.route('/set_webhook', methods=['GET'])
def set_webhook():
    """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±-—Ö—É–∫–∞ –¥–ª—è Telegram"""
    if not ensure_bot_initialized():
        return jsonify({"error": "Bot initialization failed"}), 500
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ URL —Å–µ—Ä–≤—ñ—Å—É
        service_url = request.args.get('url')
        if not service_url:
            return jsonify({"error": "URL parameter required"}), 400
        
        webhook_url = f"{service_url}/webhook"
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±-—Ö—É–∫ –ê–°–ò–ù–•–†–û–ù–ù–û
        success = run_async(bot_application.bot.set_webhook(url=webhook_url))
        
        if success:
            logger.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")
            return jsonify({
                "status": "success",
                "webhook_url": webhook_url
            })
        else:
            return jsonify({"error": "Failed to set webhook"}), 500
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ñ webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/delete_webhook', methods=['GET'])
def delete_webhook():
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –≤–µ–±-—Ö—É–∫–∞"""
    if not ensure_bot_initialized():
        return jsonify({"error": "Bot initialization failed"}), 500
    
    try:
        success = run_async(bot_application.bot.delete_webhook())
        
        if success:
            logger.info("Webhook –≤–∏–¥–∞–ª–µ–Ω–æ")
            return jsonify({"status": "success", "message": "Webhook deleted"})
        else:
            return jsonify({"error": "Failed to delete webhook"}), 500
            
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ webhook: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/bot_info', methods=['GET'])
def bot_info():
    """–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞"""
    if not ensure_bot_initialized():
        return jsonify({"error": "Bot initialization failed"}), 500
    
    try:
        # –í–∏–∫–ª–∏–∫–∞—î–º–æ get_me –ê–°–ò–ù–•–†–û–ù–ù–û
        bot_info = run_async(bot_application.bot.get_me())
        return jsonify({
            "status": "success",
            "bot_info": {
                "id": bot_info.id,
                "username": bot_info.username,
                "first_name": bot_info.first_name,
                "can_join_groups": bot_info.can_join_groups,
                "can_read_all_group_messages": bot_info.can_read_all_group_messages,
                "supports_inline_queries": bot_info.supports_inline_queries
            }
        })
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –±–æ—Ç–∞: {e}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
    logger.info("–ó–∞–ø—É—Å–∫ PrometeyLabs Telegram Bot Web Server...")
    
    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Å–∏–≥–Ω–∞–ª—ñ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –∑—É–ø–∏–Ω–∫–∏
    import signal
    import sys
    
    def signal_handler(sig, frame):
        logger.info("–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª –∑—É–ø–∏–Ω–∫–∏, –∑—É–ø–∏–Ω—è—é –±–æ—Ç–∞...")
        stop_bot()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–æ—Ç–∞, –∞–ª–µ –Ω–µ –∑—É–ø–∏–Ω—è—î–º–æ —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
    try:
        if create_bot():
            logger.info("–ë–æ—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        else:
            logger.warning("–ë–æ—Ç –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É, –∞–ª–µ —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–≤–∂—É—î —Ä–æ–±–æ—Ç—É")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –±–æ—Ç–∞: {e}")
        logger.warning("–°–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–≤–∂—É—î —Ä–æ–±–æ—Ç—É, –±–æ—Ç –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø–∏—Ç—ñ")
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ Flask —Å–µ—Ä–≤–µ—Ä –≤ –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É
    logger.info("–ó–∞–ø—É—Å–∫–∞—é Flask —Å–µ—Ä–≤–µ—Ä...")
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
